<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Sachin Aroraâ€™s Blog</title><link href="https://sachnaror.github.io/" rel="alternate"></link><link href="https://sachnaror.github.io/feeds/all.atom.xml" rel="self"></link><id>https://sachnaror.github.io/</id><updated>2025-02-03T00:00:00+05:30</updated><entry><title>The Funniest `pip install` Python Packages You Didn't Know Existed</title><link href="https://sachnaror.github.io/funny-pip-installs/" rel="alternate"></link><published>2025-02-03T00:00:00+05:30</published><updated>2025-02-03T00:00:00+05:30</updated><author><name>Sachin Arora</name></author><id>tag:sachnaror.github.io,2025-02-03:/funny-pip-installs/</id><summary type="html">&lt;p&gt;A collection of the weirdest, funniest, and most useless Python packages you can install with &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;python -m this&lt;/p&gt;
&lt;p&gt;The Zen of Python, by Tim Peters&lt;/p&gt;
&lt;p&gt;Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than &lt;em&gt;right&lt;/em&gt; now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!&lt;/p&gt;</content><category term="Python"></category></entry><entry><title>My First Blog Post</title><link href="https://sachnaror.github.io/my-first-post/" rel="alternate"></link><published>2025-02-03T00:00:00+05:30</published><updated>2025-02-03T00:00:00+05:30</updated><author><name>Sachin Arora</name></author><id>tag:sachnaror.github.io,2025-02-03:/my-first-post/</id><summary type="html">&lt;p&gt;This is my first blog post on GitHub Pages using Pelican.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Welcome to My Blog&lt;/h2&gt;
&lt;p&gt;Hello world! This is my first blog post using Pelican.&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="GitHub"></category><category term="Blogging"></category></entry><entry><title>Introduction to Python &amp; Pelican - A Static Site Generator</title><link href="https://sachnaror.github.io/python-pelican-intro/" rel="alternate"></link><published>2025-02-03T00:00:00+05:30</published><updated>2025-02-03T00:00:00+05:30</updated><author><name>Sachin Arora</name></author><id>tag:sachnaror.github.io,2025-02-03:/python-pelican-intro/</id><summary type="html">&lt;p&gt;Learn what Pelican is, why it's useful, and how it leverages Python to generate static sites.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;ðŸš€ What is Pelican?&lt;/h2&gt;
&lt;p&gt;Pelican is a static site generator written in &lt;strong&gt;Python&lt;/strong&gt;. Unlike WordPress or Django, Pelican generates HTML pages &lt;strong&gt;before deployment&lt;/strong&gt;, making sites blazing fast. &lt;/p&gt;
&lt;h3&gt;âœ… &lt;strong&gt;Why Use Pelican?&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;: Since it's static, thereâ€™s no backend latency.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: No database means fewer vulnerabilities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown Support&lt;/strong&gt;: Write posts using simple Markdown.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hosted on GitHub Pages&lt;/strong&gt;: Free &amp;amp; easy deployment.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;ðŸ“Œ &lt;strong&gt;How Pelican Works&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Pelican takes your &lt;strong&gt;Markdown files (&lt;code&gt;.md&lt;/code&gt;)&lt;/strong&gt; and converts them into HTML pages using Jinja2 templates.&lt;/p&gt;
&lt;p&gt;```sh
pelican content&lt;/p&gt;</content><category term="Python"></category></entry></feed>